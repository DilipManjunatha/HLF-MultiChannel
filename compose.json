{ "version": "2",
  "volumes": {
      "orderer.example.com": null
   },
  "networks": {
      "byfn": null
   },
  "services": {
                "ca-{OrgName}": {
                    "image": "hyperledger/fabric-ca:latest",
                    "environment": [
                        "FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server",
                        "FABRIC_CA_SERVER_CA_NAME=ca-{OrgName}",
                        "FABRIC_CA_SERVER_TLS_ENABLED=true",
                        "FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.{OrgName}.com-cert.pem",
                        "FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/CA{OrgName}_PRIVATE_KEY",
                        "FABRIC_CA_SERVER_PORT={CAPORT}"
                    ],
                    "ports": [
                        "{CAPORT}:{CAPORT}"
                    ],
                    "command": "sh -c 'fabric-ca-server start --ca.certfile /etc/hyperledger/fabric-ca-server-config/ca.{OrgName}.com-cert.pem --ca.keyfile /etc/hyperledger/fabric-ca-server-config/CA{OrgName}_PRIVATE_KEY -b admin:adminpw -d'",
                    "volumes": [
                        "./crypto-config/peerOrganizations/{OrgName}.com/ca/:/etc/hyperledger/fabric-ca-server-config"
                    ],
                    "container_name": "ca_peerOrg_{OrgName}",
                    "networks": [
                        "byfn"
                    ]},
                "cli": {
                    "container_name": "cli",
                    "image": "hyperledger/fabric-tools:latest",
                    "tty": true,
                    "stdin_open": true,
                    "environment": [
                        "SYS_CHANNEL={SYSCHANNEL}",
                        "GOPATH=/opt/gopath",
                        "CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock",
                        "FABRIC_LOGGING_SPEC=INFO",
                        "CORE_PEER_ID=cli",
                        "CORE_PEER_ADDRESS=peer0.{DefaultCliOrg}.com:{DefaultPeerPort}",
                        "CORE_PEER_LOCALMSPID={DefaultCliOrg}MSP",
                        "CORE_PEER_TLS_ENABLED=true",
                        "CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/{DefaultCliOrg}.com/peers/peer0.{DefaultCliOrg}.com/tls/server.crt",
                        "CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/{DefaultCliOrg}.com/peers/peer0.{DefaultCliOrg}.com/tls/server.key",
                        "CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/{DefaultCliOrg}.com/peers/peer0.{DefaultCliOrg}.com/tls/ca.crt",
                        "CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/{DefaultCliOrg}.com/users/Admin@{DefaultCliOrg}.com/msp"
                    ],
                    "working_dir": "/opt/gopath/src/github.com/hyperledger/fabric/peer",
                    "command": "/bin/bash",
                    "volumes": [
                        "/var/run/:/host/var/run/",
                        "./chaincode/:/opt/gopath/src/github.com/chaincode",
                        "./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/",
                        "./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/",
                        "./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts"
                    ],
                    "depends_on": ["orderer.example.com"],
                    "networks": ["byfn"]
                },
                "peer{PEER}.{OrgName}.com": {
                    "container_name": "peer{PEER}.{OrgName}.com",
                    "extends": {
                        "file": "base/docker-compose-base.yaml",
                        "service": "peer{PEER}.{OrgName}.com"
                    },
                    "networks": ["byfn"]},
              
                "orderer.example.com": {
                    "extends": {
                        "file": "base/docker-compose-base.yaml",
                        "service": "orderer.example.com"
                    },
                    "container_name": "orderer.example.com",
                    "networks": [
                        "byfn"
                    ]
                }}}